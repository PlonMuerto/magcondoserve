
type Query {
    hellou:String!
    getUser:UserView
    
    #users
    getFavorites(page:Int):Paginate
    isFavorite(id:ID!):Boolean!
    
    #administrador
    getUsers(pages:Int,page:Int,name:String,email:String,phone:Float,country:String):PaginateUser
    getUserslength:Int!
    getUsersSubscribeds(value:Boolean!):Int!
    getCreatorsLength:Int!
    getUnconfirmedPhoneUsers(value:Boolean!):Int!
    getUnconfirmedEmailUsers(value:Boolean!):Int!

}

type PaginateUser{
    users:[User]!,
    pages:Int!,
    page:Int!
}

type Mutation{
    createUser(name:String!,email:String!,password:String!,phone:Float!,country:String!):String 
    loginUser(email:String!,password:String!):String
    toggleFavorite(id:ID!):Boolean!
    updateUser(id:ID!,name:String,country:String):String
}




type UserView {
    name:String
    email:String
    role:RoleType
    phone:Int
    country:String
}

type User {
    _id:ID
    name:String!
    email:String!
    password:String!
    role:RoleType!
    phone:Float
    favorites:[Notice]
    country:String
    subscribed:Boolean
    phoneConfirm:Boolean
    emailConfirm:Boolean,
    locked:Boolean
}

enum RoleType{
    user
    creator
    admin
}